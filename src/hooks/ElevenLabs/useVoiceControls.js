// useVoiceControls.js\n// Hook for managing voice control UI state and interactions\n\nimport { useState, useCallback } from 'react';\n\nconst useVoiceControls = ({\n  onConnect,\n  onDisconnect,\n  onStartRecording,\n  onStopRecording\n}) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isDisconnecting, setIsDisconnecting] = useState(false);\n\n  // Handle connect with loading state\n  const handleConnect = useCallback(async () => {\n    if (isConnecting) return;\n    \n    setIsConnecting(true);\n    try {\n      await onConnect?.();\n    } catch (error) {\n      console.error('Connection failed:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [onConnect, isConnecting]);\n\n  // Handle disconnect with loading state\n  const handleDisconnect = useCallback(async () => {\n    if (isDisconnecting) return;\n    \n    setIsDisconnecting(true);\n    try {\n      await onDisconnect?.();\n    } catch (error) {\n      console.error('Disconnection failed:', error);\n    } finally {\n      setIsDisconnecting(false);\n    }\n  }, [onDisconnect, isDisconnecting]);\n\n  // Handle start recording\n  const handleStartRecording = useCallback(async () => {\n    try {\n      await onStartRecording?.();\n    } catch (error) {\n      console.error('Start recording failed:', error);\n    }\n  }, [onStartRecording]);\n\n  // Handle stop recording\n  const handleStopRecording = useCallback(async () => {\n    try {\n      await onStopRecording?.();\n    } catch (error) {\n      console.error('Stop recording failed:', error);\n    }\n  }, [onStopRecording]);\n\n  return {\n    handleConnect,\n    handleDisconnect,\n    handleStartRecording,\n    handleStopRecording,\n    isConnecting,\n    isDisconnecting\n  };\n};\n\nexport default useVoiceControls; 