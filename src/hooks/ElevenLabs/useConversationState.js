// useConversationState.js\n// Hook for managing conversation state and message history\n\nimport { useState, useCallback } from 'react';\n\nconst useConversationState = () => {\n  const [conversation, setConversation] = useState([]);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Add a user message\n  const addUserMessage = useCallback((transcript) => {\n    const message = {\n      id: Date.now() + '_user',\n      type: 'user',\n      transcript,\n      timestamp: Date.now()\n    };\n    \n    setConversation(prev => [...prev, message]);\n    setCurrentTranscript(''); // Clear current transcript after adding\n    return message;\n  }, []);\n\n  // Add an agent response\n  const addAgentResponse = useCallback((response) => {\n    const message = {\n      id: Date.now() + '_agent',\n      type: 'agent',\n      response,\n      timestamp: Date.now()\n    };\n    \n    setConversation(prev => [...prev, message]);\n    return message;\n  }, []);\n\n  // Update real-time transcript\n  const updateTranscript = useCallback((transcript) => {\n    setCurrentTranscript(transcript);\n  }, []);\n\n  // Clear conversation\n  const clearConversation = useCallback(() => {\n    setConversation([]);\n    setCurrentTranscript('');\n    setIsTyping(false);\n  }, []);\n\n  // Set typing state\n  const setTypingState = useCallback((typing) => {\n    setIsTyping(typing);\n  }, []);\n\n  return {\n    conversation,\n    currentTranscript,\n    isTyping,\n    addUserMessage,\n    addAgentResponse,\n    updateTranscript,\n    clearConversation,\n    setTypingState\n  };\n};\n\nexport default useConversationState; 